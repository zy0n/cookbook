/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common';

export interface PlasmaTokenInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'borrowToken()': FunctionFragment;
    'borrowTokenAddress()': FunctionFragment;
    'calculateAssets(uint256)': FunctionFragment;
    'calculateReward(uint256,uint256)': FunctionFragment;
    'calculateShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'feeBasis()': FunctionFragment;
    'feePoints()': FunctionFragment;
    'flashFee(address,uint256)': FunctionFragment;
    'flashLoan(address,address,uint256,bytes)': FunctionFragment;
    'flashProfit()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'isRailgunAddress(address)': FunctionFragment;
    'lastStoredBalance()': FunctionFragment;
    'maxFlashLoan(address)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'railgunAdapt()': FunctionFragment;
    'railgunProxy()': FunctionFragment;
    'railgunTreasury()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'resyncPool()': FunctionFragment;
    'setFeeBasis(uint256)': FunctionFragment;
    'setFeePoints(uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'borrowToken'
      | 'borrowTokenAddress'
      | 'calculateAssets'
      | 'calculateReward'
      | 'calculateShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'feeBasis'
      | 'feePoints'
      | 'flashFee'
      | 'flashLoan'
      | 'flashProfit'
      | 'increaseAllowance'
      | 'isRailgunAddress'
      | 'lastStoredBalance'
      | 'maxFlashLoan'
      | 'name'
      | 'owner'
      | 'railgunAdapt'
      | 'railgunProxy'
      | 'railgunTreasury'
      | 'renounceOwnership'
      | 'resyncPool'
      | 'setFeeBasis'
      | 'setFeePoints'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'borrowToken',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'borrowTokenAddress',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateAssets',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateReward',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateShares',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'feeBasis', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feePoints', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'flashFee',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'flashLoan',
    values: [string, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'flashProfit',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isRailgunAddress',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'lastStoredBalance',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'maxFlashLoan',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'railgunAdapt',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'railgunProxy',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'railgunTreasury',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'resyncPool',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeBasis',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeePoints',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'borrowToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'borrowTokenAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateAssets',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateReward',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateShares',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeBasis', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feePoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flashFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flashLoan', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'flashProfit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isRailgunAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastStoredBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxFlashLoan',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'railgunAdapt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'railgunProxy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'railgunTreasury',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'resyncPool', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeBasis',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFeePoints',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PlasmaToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlasmaTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowToken(overrides?: CallOverrides): Promise<[string]>;

    borrowTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    calculateAssets(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calculateReward(
      amount: BigNumberish,
      _totalSupply: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calculateShares(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    feeBasis(overrides?: CallOverrides): Promise<[BigNumber]>;

    feePoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    flashProfit(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    isRailgunAddress(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    lastStoredBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFlashLoan(
      token: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    railgunAdapt(overrides?: CallOverrides): Promise<[string]>;

    railgunProxy(overrides?: CallOverrides): Promise<[string]>;

    railgunTreasury(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    resyncPool(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setFeeBasis(
      basis: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setFeePoints(
      points: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowToken(overrides?: CallOverrides): Promise<string>;

  borrowTokenAddress(overrides?: CallOverrides): Promise<string>;

  calculateAssets(
    shares: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculateReward(
    amount: BigNumberish,
    _totalSupply: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculateShares(
    assets: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  feeBasis(overrides?: CallOverrides): Promise<BigNumber>;

  feePoints(overrides?: CallOverrides): Promise<BigNumber>;

  flashFee(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  flashLoan(
    receiver: string,
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  flashProfit(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  isRailgunAddress(
    account: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  lastStoredBalance(overrides?: CallOverrides): Promise<BigNumber>;

  maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  railgunAdapt(overrides?: CallOverrides): Promise<string>;

  railgunProxy(overrides?: CallOverrides): Promise<string>;

  railgunTreasury(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  resyncPool(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setFeeBasis(
    basis: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setFeePoints(
    points: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowToken(overrides?: CallOverrides): Promise<string>;

    borrowTokenAddress(overrides?: CallOverrides): Promise<string>;

    calculateAssets(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateReward(
      amount: BigNumberish,
      _totalSupply: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateShares(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    feeBasis(overrides?: CallOverrides): Promise<BigNumber>;

    feePoints(overrides?: CallOverrides): Promise<BigNumber>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    flashProfit(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isRailgunAddress(
      account: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    lastStoredBalance(overrides?: CallOverrides): Promise<BigNumber>;

    maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    railgunAdapt(overrides?: CallOverrides): Promise<string>;

    railgunProxy(overrides?: CallOverrides): Promise<string>;

    railgunTreasury(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resyncPool(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeBasis(basis: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeePoints(
      points: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowToken(overrides?: CallOverrides): Promise<BigNumber>;

    borrowTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAssets(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateReward(
      amount: BigNumberish,
      _totalSupply: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateShares(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    feeBasis(overrides?: CallOverrides): Promise<BigNumber>;

    feePoints(overrides?: CallOverrides): Promise<BigNumber>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    flashProfit(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    isRailgunAddress(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastStoredBalance(overrides?: CallOverrides): Promise<BigNumber>;

    maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    railgunAdapt(overrides?: CallOverrides): Promise<BigNumber>;

    railgunProxy(overrides?: CallOverrides): Promise<BigNumber>;

    railgunTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    resyncPool(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setFeeBasis(
      basis: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setFeePoints(
      points: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    borrowToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowTokenAddress(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateAssets(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateReward(
      amount: BigNumberish,
      _totalSupply: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateShares(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    feeBasis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    flashProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    isRailgunAddress(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastStoredBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFlashLoan(
      token: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    railgunAdapt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    railgunProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    railgunTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    resyncPool(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setFeeBasis(
      basis: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setFeePoints(
      points: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
